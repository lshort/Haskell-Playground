{-# LANGUAGE OverloadedStrings #-}

{-|

This is where all the routes and handlers are defined for your site. The
'site' function combines everything together and is exported by this module.

-}

module Site
  ( site
  ) where

import           Control.Applicative
import           Control.Monad
import           Control.Monad.Trans
import           Data.Maybe
import           Data.List
import           Data.ByteString.Internal
import qualified Data.Text.Encoding as T
import qualified Data.Text as DT
import qualified Text.XmlHtml as X
import           Snap.Extension.Heist
import           Snap.Extension.Timer
import           Snap.Util.FileServe
import           Snap.Types
import           Text.Templating.Heist
import           Debug.Trace


import           Application
import Database.HDBC
import Database.HDBC.PostgreSQL

------------------------------------------------------------------------------
-- | Renders the front page of the sample site.
--
-- The 'ifTop' is required to limit this to the top of a route.
-- Otherwise, the way the route table is currently set up, this action
-- would be given every request.
index :: Application ()
index = ifTop $ heistLocal (bindSplices indexSplices) $ render "index"
  where
    indexSplices =
        [ ("start-time",   startTimeSplice)
        , ("current-time", currentTimeSplice)
        ]


------------------------------------------------------------------------------
-- | Renders the echo page.
echo :: Application ()
echo = do
    message <- decodedParam "stuff"
    heistLocal (bindString "message" (T.decodeUtf8 message)) $ render "echo"
  where
    decodedParam p = fromMaybe "" <$> getParam p

------------------------------------------------------------------------------
-- | Renders the creature_template page.
creature_tpl ::  Application ()
creature_tpl = heistLocal templateSt $ render "creature_template"
  where
    templateSt ts = bindSplices sqlSplices ts
    sqlSplices =
--        [ ("start-time",   startTimeSplice)
--        , ("current-time", currentTimeSplice)
        [ ("get_sql_basic",   grabSQLbasic)
        , ("get_sql_where",   grabSQLwhere)
        , ("get_sql_where_new",   grabSQLwhereNew)
        ]


------------------------------------------------------------------------------
-- | The main entry point handler.
site :: Application ()
site  = route [ ("/",  index)
             , ("/creature_template", creature_tpl)
             , ("/echo/:stuff", echo)
             ]
       <|> serveDirectory "resources/static"


grabSQLsingleOld :: Splice Application
grabSQLsingleOld = do
    contents <- getParamNode
    let column = getAttr contents "column"
        key    = getAttr contents "key"
        value  = getAttr contents "value"
        table  = getAttr contents "table"
    qval <- liftIO $ runQuery $ bldQueryWhere column table key value
    return $ [X.TextNode $ DT.pack $ qval]

grabSQLwhere :: Splice Application
grabSQLwhere = do
    contents <- getParamNode
    let column = getChildText contents "column"
        key    = getChildText contents "key"
        value  = getChildText contents "value"
        table  = getChildText contents "table"
    qval <- liftIO $ runQuery $ bldQueryWhere column table key value
    return $ [X.TextNode $ DT.pack $ qval]

grabSQLwhereNew :: Splice Application
grabSQLwhereNew = do
    contents <- getParamNode
    let column = getChildText contents "column"
        clause = getChildText contents "where_clause"
        table  = getChildText contents "table"
    qval <- liftIO $ runQuery $ bldQueryWhereNew column table clause
    return $ [X.TextNode $ DT.pack $ qval]

grabSQLbasic :: Splice Application
grabSQLbasic = do
    contents <- getParamNode
    let column = getChildText contents "column"
        table  = getChildText contents "table"
    qval <- liftIO $ runQuery $ bldQueryBasic column table 
    return $ [X.TextNode $ DT.pack $ qval]

getAttr :: X.Node -> DT.Text -> String
getAttr x y = DT.unpack $ maybe (DT.pack "") id (X.getAttribute y x)

getChildText :: X.Node -> DT.Text -> String
getChildText x y = DT.unpack $ maybe (DT.pack "") id (liftM X.nodeText tag)
    where tag = X.childElementTag y x 

bldQueryWhere :: String -> String -> String -> String -> String
bldQueryWhere col tab key val = "SELECT " ++ col ++ " FROM " ++ tab ++ " WHERE " 
                               ++ key ++ " = " ++ val

bldQueryWhereNew :: String -> String -> String -> String
bldQueryWhereNew col tab whr = bldQueryBasic col tab ++ " WHERE " ++ whr

bldQueryBasic :: String -> String -> String
bldQueryBasic col tab = "SELECT " ++ col ++ " FROM " ++ tab

runQuery :: String -> IO String
runQuery x | trace ("runQuery " ++ show x) False = undefined
runQuery x = do
        conn <- connectPostgreSQL "dbname=test"
        results <- quickQuery' conn x []
        disconnect conn
        return $ (concat . intersperse "," . map fromSql . concat) results

--getString :: Maybe Data.ByteString.Internal.ByteString -> String
--getString Nothing = ""
--getString (Just x) = toString x
